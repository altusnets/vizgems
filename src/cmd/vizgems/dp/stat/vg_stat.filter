VARS{
#include <ctype.h>
#include <tm.h>
#define VG_DEFS_MAIN
#include "vg_hdr.h"
#define VG_STATMAP_MAIN
#include "vg_statmap.c"
#include "sl_trans.c"

#define SZ_dateissued DDSSZ_rec_stat_dateissued
#define SZ_hourissued DDSSZ_rec_stat_hourissued
#define SZ_label DDSSZ_rec_stat_label

static time_t mint, maxt;
static int interval, fph, notimenorm;

static void mytmfmt1 (char *buf, size_t len, const char *fmt, time_t *clock) {
    static char *pfmt;
    static time_t pclock;
    static char pbuf[1024];

    if (clock && *clock == pclock && pclock > 0 && fmt == pfmt) {
        strncpy (buf, pbuf, len);
        return;
    }
    tmfmt (buf, len, fmt, clock);
    if (clock) {
        strncpy (pbuf, buf, 1024);
        pclock = *clock;
        pfmt = (char *) fmt;
    }
}
static void mytmfmt2 (char *buf, size_t len, const char *fmt, time_t *clock) {
    static char *pfmt;
    static time_t pclock;
    static char pbuf[1024];

    if (clock && *clock == pclock && pclock > 0 && fmt == pfmt) {
        strncpy (buf, pbuf, len);
        return;
    }
    tmfmt (buf, len, fmt, clock);
    if (clock) {
        strncpy (pbuf, buf, 1024);
        pclock = *clock;
        pfmt = (char *) fmt;
    }
}
}
BEGIN{
    char *s;

    if (statmapload (getenv ("STATMAPFILE"), FALSE, FALSE, FALSE) == -1)
        SUerror ("vg_stat", "cannot load statmap file");
    sl_transopen (getenv ("OBJECTTRANSFILE"));
    interval = atoi (getenv ("STATINTERVAL"));
    fph = 3600 / interval;
    mint = strtoll (getenv ("MINTIME"), &s, 10);
    maxt = strtoll (getenv ("MAXTIME"), &s, 10);
    if ((s = getenv ("NOTIMENORM")))
        notimenorm = atoi (s);
}
{
    char buf[1000], lbuf[SZ_label], *s1;
    sl_trans_t *otp;
    int h, smi;
    char *s;
    time_t t, hs;

    KEEP;

    if (timeissued < mint) {
        SUwarning (
            0, "vg_stat", "time older by %d than min time", mint - timeissued
        );
        timeissued = mint;
    }
    if (timeissued > maxt) {
        SUwarning (
            0, "vg_stat", "time newer by %d than max time", timeissued - maxt
        );
        timeissued = maxt;
    }
    if (frame == -1 && !notimenorm)
        timeissued += interval / 2;
    t = timeissued;
    if (!dateissued[0])
        mytmfmt1 (dateissued, SZ_dateissued, "%Y.%m.%d", &t);
    if (!hourissued[0])
        mytmfmt2 (hourissued, SZ_hourissued, "%H", &t);
    if (frame == -1) {
        sfsprintf (buf, 1000, "%s-%s:00:00", dateissued, hourissued);
        hs = tmdate (buf, &s, &t);
        h = (hourissued[0] - '0') * 10 + (hourissued[1] - '0');
        frame = h * fph + (t - hs) / interval;
        if (!notimenorm)
            timeissued = hs + interval * ((t - hs) / interval);
    }
    if (!label[0]) {
        if ((smi = statmapfind (key)) == -1)
            strncpy (label, key, SZ_label - 1);
        else if (!(s1 = strchr (key, '.')) || s1[1] == '_')
            strncpy (label, statmaps[smi].clabel, SZ_label - 1);
        else
            sfsprintf (label, SZ_label - 1, statmaps[smi].flabel, s1 + 1);
    } else if (label[0] == '+' && (smi = statmapfind (key)) > -1) {
        sfsprintf (lbuf, SZ_label - 1, statmaps[smi].flabel, label + 1);
        memset (label, 0, SZ_label);
        lbuf[SZ_label - 1] = 0;
        strcpy (label, lbuf);
    }

    if ((otp = sl_transfind (id))) {
        memset (id, 0, strlen (id));
        strcpy (id, otp->sl_outid);
    }

    if (frame < 0 || frame >= (24 * 60 * 60) / interval)
        DROP;

    if (isnan (val)) {
        SUwarning (
            0, "vg_stat", "NaN value for %d %s %s-%s",
            timeissued, key, level, id
        );
        DROP;
    }
}
